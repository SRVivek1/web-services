WSDL Components VS Java Bean
--------------------------------
**Note the following observation is tested in glassfish server 3.x. All the WSDL components are generated by server only. 
  To develop this web service we have just used two annotations they are @WebService and @WebMethod. 
  The "suffix" may be get generated different in other server generated WSDL files.
============================================================================================================================
	1. Service
	---------------
		>> Class name is used as Service name with a suffix "Service".
	
		1.1. Port
		---------------
			>> Class name is used as Port name with a suffix "Port".
			>> Port specifies the binding name using attribute 'binding'.
		
			1.1.1. Soap Address
			---------------
				>> http://<server_ip:port>/<project_name>/service_name
	
	2. Binding
	---------------
		>> Port name is used as Binding name with a suffix 'Binding'.
		>> Binding specifies the PortType name using attribute 'type'.
			
			2.1. Soap Binding
			---------------------
				>> This specifies the transport protocol using attribute 'transport' and style using 'style'.
			
			2.1. Operation 
			---------------------
				>> Method name is used as operation name here.
				>> It has other information in child tags about <soap:operation>, <input> & <output> tags.
	3. PortType
	---------------
		>> It's name is same as class name means it uses class name as it is.
		>> This tag has no extra info. apart from it's name.
		>> This will have operation tag as child.
		
		
		3.1. Operation
		----------------------
			>> Operation name is method name only means not suffix or prefix.
			>> It will have <input> and <output> tag as childs.
			
			3.1.1. Input
			---------------
				>> Input tag has "Action" attribute which defines the Request URL.
					>>> This is formed using "http://"+ reversed_package_name + class_name + method_name + "Request".
				>> Input tag also defines "message" attribute which provides information about the message going to be 
				   passed as argument in the method.
				   
			3.1.2. Output
			---------------
				>> Output tag has "Action" attribute which defines the Response URL.
					>>> This is formed using "http://"+ reversed_package_name + class_name + method_name + "Response".
				>> Input tag also defines "message" attribute which provides information about the message going to be 
				   passed as argument in the method.
				   
			***Note
			----------
				>> Even if we have multiple arguments in a WebMethod WebService will wrap them in a single message and 
				   will treat them as single argument.
				>> This is one of the reason why web service won't allow method overloading.
				
	4. Message
	-------------
		>> This element is a wrapper of request and response parameters of the method.
		>> This wraps all parameters as a single message.
		>> Even if we don't have any inputs it will generate message for request and response.
		
		4.1. Part
		-------------
			>> Name of the part is 'parameters'.
			>> It has an attribute 'element' which defines a reference of 'element' which is a child tag of 'types'.
			
	5. Types
	------------
		>> This section defines all the complex types used as parameters in the messages.
		>> Please read carefully to understand types in detail.